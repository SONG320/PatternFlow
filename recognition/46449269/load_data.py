# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W47y2tM0qQx0pPewZRwx7SKggG7bd4SS
"""

import glob
import sklearn as sk
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models, Input, Model
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras import backend as K
from IPython.display import clear_output

from google.colab import drive
drive.mount('/content/drive')

MASK_PATH = '/content/drive/MyDrive/ISIC2018_Task1_Training_GroundTruth_x2/*.png'
IMAGE_PATH = '/content/drive/MyDrive/ISIC2018_Task1-2_Training_Input_x2/*.jpg'

# Update image dimensions for model
img_height = 256
img_width = 256

def load_data():
  """
  Load and splits the dataset for training, testing and validation.
  Return shuffled tf.data.Dataset objects for train, test and validation datasets.
  """
  images = sorted(glob.glob(IMAGE_PATH))
  masks = sorted(glob.glob(MASK_PATH))

  #Â Split dataset (60% for training, 20% for testing and 20% for validation).
  X_train, X_test, y_train, y_test = train_test_split(images, masks, test_size = 0.2, random_state = 1)
  X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.25, random_state = 1)

  df_train = tf.data.Dataset.from_tensor_slices((X_train, y_train))
  df_test = tf.data.Dataset.from_tensor_slices((X_test, y_test))
  df_val = tf.data.Dataset.from_tensor_slices((X_val, y_val))

  return df_train.shuffle(len(X_train)), df_test.shuffle(len(X_test)), df_val.shuffle(len(X_val))

df_train, df_test, df_val = load_data()

len(df_train),len(df_test),len(df_val)

def decode_image(path):
  """
  Decodes a .jpeg image. Outputs grayscale image with standardised
  dimension (256 x 192) and normalised pixel values.
  """
  img = tf.io.read_file(path)
  img = tf.image.decode_jpeg(img, channels = 1)
  img = tf.image.resize(img, [img_height, img_width])
  img = tf.cast(img, tf.float32) / 255.0
  return img

def decode_mask(path):
  """
  Decodes a .jpeg image. Outputs grayscale image with standardised
  dimension (256 x 192) and normalised pixel values.
  """
  img = tf.io.read_file(path)
  img = tf.image.decode_png(img, channels = 1)
  img = tf.image.resize(img, [img_height, img_width])
  img = tf.cast(img, tf.float32) / 255.0

  # Round pixel values to be strictly 0 or 1.
  img = tf.math.round(img)
  return img

def process_path(image_path, mask_path):
  """
  Map function for datasets. Decodes images and masks, and reshapes
  dataset tensors for updated image dimensions.
  """
  image = decode_image(image_path)
  mask = decode_mask(mask_path)
  image = tf.reshape(image, (img_height, img_width, 1))
  mask = tf.reshape(mask, (img_height, img_width, 1))
  return image, mask

df_train = df_train.map(process_path)
df_test = df_test.map(process_path)

df_test

df_val = df_val.map(process_path)